{"version":3,"file":"index.js","sources":["../src/navigation-wrapper/helpers.ts","../src/navigation-wrapper/ScreenRenderer.tsx","../src/navigation-wrapper/StackRenderer.tsx","../src/navigation-wrapper/NavigationWrapper.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport {\n    NavigationConfigType,\n    ParamsType,\n    ScreenType,\n    MakeNavHookReturnType,\n    NavigatorTypes,\n    SingleGroupType\n} from '../types/navigation.types'\n\n/**\n * This function generates the navigation map for the routes\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n * @param navigationConfig\n * @returns\n */\nexport const makeNavigation =\n    (navigationConfig: NavigationConfigType): MakeNavHookReturnType =>\n    (\n        params?: ParamsType\n    ): {\n        /** The initial route to render */ initial: string\n        /** The screens map to be rendered */\n        screens: ScreenType[]\n        type?: NavigatorTypes\n        stacks?: SingleGroupType[]\n    } => {\n        const { initialGroup, groups } = navigationConfig(params || {})\n        // First the hook must select the initial group\n        const selectedGroupKey = Object.keys(groups).reduce((selectedKey, currentItem) => {\n            const { condition } = groups[currentItem]\n            // To be selected each group must have a condition key, and only the first group\n            // which condition it's true will be mounted\n            if (condition === true) {\n                selectedKey = currentItem\n            }\n            return selectedKey\n        }, initialGroup)\n        const { initialScreen, screens, layout, type, stacks } = groups[selectedGroupKey]\n\n        const getScreenMap = (inputScreens: any, overrideLayout?: string): any => {\n            return Object.keys(inputScreens).map((currentKey) => {\n                const { component, layout: screenLayout } = inputScreens[currentKey]\n                let componentToUse = inputScreens[currentKey]\n                let layoutToUse = layout\n                if (component) {\n                    componentToUse = component\n                }\n\n                if (screenLayout) {\n                    layoutToUse = screenLayout\n                }\n                console.log('Data: ', {\n                    name: currentKey,\n                    component: componentToUse as React.ComponentType,\n                    layout: overrideLayout || layoutToUse\n                })\n                return {\n                    name: currentKey,\n                    component: componentToUse as React.ComponentType,\n                    layout: overrideLayout || layoutToUse\n                }\n            })\n        }\n\n        let outputStacks = null\n        if (stacks) {\n            outputStacks = stacks.map((stackItem) => {\n                return {\n                    ...stackItem,\n                    screens: getScreenMap(stackItem.screens, stackItem.layout)\n                }\n            })\n        }\n        // After we get the initial selected group we build a easy to loop screens map\n        const screensMap: ScreenType[] = useMemo(\n            () => getScreenMap(screens),\n            [screens, layout, getScreenMap]\n        )\n        return {\n            initial: initialScreen || '',\n            screens: screensMap,\n            type,\n            stacks: outputStacks as any\n        }\n    }\n","import React from 'react'\n\ninterface ScreenRendererProps {\n    /** List of the available layouts */\n    layouts: { [key: string]: React.ComponentType }\n    /** Screen component ready to be rendered */\n    screen: {\n        component: React.ComponentType\n        layout?: string\n    }\n}\n\n/**\n * Wrapper component to render the screens and wrapped in the layout\n * (If available)\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n * @since 0.0.1\n * @param param0\n * @returns\n */\nconst ScreenRenderer: React.FC<ScreenRendererProps> = ({ layouts, screen, ...routeProps }) => {\n    const ComponentToRender = screen.component\n    const { layout } = screen\n    const layoutKey = layout as keyof typeof layouts\n    const LayoutToRender = layout ? layouts[layoutKey] : null\n\n    if (!ComponentToRender) {\n        return null\n    }\n\n    return LayoutToRender ? (\n        <LayoutToRender {...routeProps}>\n            <ComponentToRender {...routeProps} />\n        </LayoutToRender>\n    ) : (\n        <ComponentToRender />\n    )\n}\n\nexport default ScreenRenderer\n","import React from 'react'\nimport { StackRendererProps } from '../types/stack-renderer.types'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport ScreenRenderer from './ScreenRenderer'\n\nconst Stack = createStackNavigator()\nconst Tabs = createBottomTabNavigator()\n\ntype NavigatorOptionsType = {\n    initialRouteName?: string\n    screenOptions?: {}\n    tabBar?: any\n    unmountOnBlur?: boolean\n}\n\n/**\n * This component renders navigators which contains nested navigators (stacks)\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n * @param param0\n * @returns\n */\nexport const NestedStackRenderer: React.FC<StackRendererProps> = ({\n    initial,\n    type,\n    screens,\n    layouts,\n    stacks,\n    tabOptions,\n    TabsRenderer\n}) => {\n    let NavigatorComponent = Stack.Navigator\n    let ScreenNavComponent: any = Stack.Screen\n    let unmountOnBlur = tabOptions ? tabOptions.unmountOnBlur : false\n    const navigatorOptions: NavigatorOptionsType = {\n        initialRouteName: initial\n    }\n\n    if (type === 'tabs') {\n        NavigatorComponent = Tabs.Navigator as any\n        ScreenNavComponent = Tabs.Screen\n        navigatorOptions.tabBar =\n            TabsRenderer && typeof TabsRenderer === 'function' ? TabsRenderer : null\n        navigatorOptions.unmountOnBlur = unmountOnBlur\n    } else {\n        NavigatorComponent = Stack.Navigator\n        navigatorOptions.screenOptions = { headerShown: false }\n    }\n\n    return (\n        <NavigatorComponent {...navigatorOptions}>\n            {stacks &&\n                stacks.map((item, key) => (\n                    <ScreenNavComponent key={`stacks-${key}`} name=\"stack-screens\">\n                        {(props: any) => (\n                            <NestedStackRenderer\n                                type={item.type}\n                                initial={item.initialScreen}\n                                layouts={layouts}\n                                screens={item.screens}\n                                TabsRenderer={TabsRenderer}\n                                tabOptions={tabOptions}\n                                {...props}\n                            />\n                        )}\n                    </ScreenNavComponent>\n                ))}\n            {screens &&\n                screens.map((screen, key) => (\n                    <ScreenNavComponent key={`screen-${key}`} name={screen.name}>\n                        {(props: any) => (\n                            <ScreenRenderer layouts={layouts} screen={screen} {...props} />\n                        )}\n                    </ScreenNavComponent>\n                ))}\n        </NavigatorComponent>\n    )\n}\n\n/**\n * This component renders the initial navigator for your application\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n * @param param0\n * @returns\n */\nconst StackRenderer: React.FC<StackRendererProps> = ({\n    initial,\n    type,\n    screens,\n    layouts,\n    stacks,\n    tabOptions,\n    TabsRenderer\n}) => {\n    return (\n        <NestedStackRenderer\n            initial={initial}\n            type={type}\n            screens={screens}\n            layouts={layouts}\n            stacks={stacks}\n            tabOptions={tabOptions}\n            TabsRenderer={TabsRenderer}\n        />\n    )\n}\n\nStackRenderer.defaultProps = {\n    TabsRenderer: false\n}\n\nexport default StackRenderer\n","import React from 'react'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { makeNavigation } from './helpers'\nimport StackRenderer from './StackRenderer'\nimport { NavigationWrapperProps } from '../types/navigation.types'\n\n/**\n * Wrapps the navigation and builds the necesary structure for it\n * @author Alejandro Quiroz <alejandro.devop@gmail.com>\n * @version 1.0.0\n * @returns\n */\nconst NavigationWrapper: React.FC<NavigationWrapperProps> = ({\n    children,\n    layouts,\n    config,\n    params,\n    TabsRenderer,\n    AppBarRenderer,\n    tabOptions\n}) => {\n    const useNavigation = makeNavigation(config)\n    const { initial, screens, stacks, type } = useNavigation(params)\n    return (\n        <NavigationContainer>\n            {AppBarRenderer}\n            <StackRenderer\n                initial={initial}\n                screens={screens}\n                type={type}\n                layouts={layouts}\n                stacks={stacks}\n                tabOptions={tabOptions}\n                TabsRenderer={TabsRenderer}\n            />\n            {children}\n        </NavigationContainer>\n    )\n}\n\nexport default NavigationWrapper\n"],"names":["useMemo","React","createStackNavigator","createBottomTabNavigator","NavigationContainer"],"mappings":"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"}